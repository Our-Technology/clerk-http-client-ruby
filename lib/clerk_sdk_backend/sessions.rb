# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module ClerkSDKBackend
  extend T::Sig
  class Sessions
    extend T::Sig
    # The Session object is an abstraction over an HTTP session.
    # It models the period of information exchange between a user and the server.
    # Sessions are created when a user successfully goes through the sign in or sign up flows.
    # https://clerk.com/docs/reference/clerkjs/session

    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end


    sig { params(request: T.nilable(::ClerkSDKBackend::Operations::GetSessionListRequest)).returns(::ClerkSDKBackend::Operations::GetSessionListResponse) }
    def all(request)
      # all - List all sessions
      # Returns a list of all sessions.
      # The sessions are returned sorted by creation date, with the newest sessions appearing first.
      # **Deprecation Notice (2024-01-01):** All parameters were initially considered optional, however
      # moving forward at least one of `client_id` or `user_id` parameters should be provided.
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/sessions"
      headers = {}
      query_params = Utils.get_query_params(::ClerkSDKBackend::Operations::GetSessionListRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::ClerkSDKBackend::Operations::GetSessionListResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[::ClerkSDKBackend::Shared::Session])
          res.session_list = out
        end
      elsif [400, 401, 422].include?(r.status)
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::ClerkErrors)
          res.clerk_errors = out
        end
      end
      res
    end


    sig { params(session_id: ::String).returns(::ClerkSDKBackend::Operations::GetSessionResponse) }
    def find(session_id)
      # find - Retrieve a session
      # Retrieve the details of a session
      request = ::ClerkSDKBackend::Operations::GetSessionRequest.new(
        
        session_id: session_id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::ClerkSDKBackend::Operations::GetSessionRequest,
        base_url,
        '/sessions/{session_id}',
        request
      )
      headers = {}
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::ClerkSDKBackend::Operations::GetSessionResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::Session)
          res.session = out
        end
      elsif [400, 401, 404].include?(r.status)
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::ClerkErrors)
          res.clerk_errors = out
        end
      end
      res
    end


    sig { params(session_id: ::String).returns(::ClerkSDKBackend::Operations::RevokeSessionResponse) }
    def delete(session_id)
      # delete - Revoke a session
      # Sets the status of a session as "revoked", which is an unauthenticated state.
      # In multi-session mode, a revoked session will still be returned along with its client object, however the user will need to sign in again.
      request = ::ClerkSDKBackend::Operations::RevokeSessionRequest.new(
        
        session_id: session_id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::ClerkSDKBackend::Operations::RevokeSessionRequest,
        base_url,
        '/sessions/{session_id}/revoke',
        request
      )
      headers = {}
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::ClerkSDKBackend::Operations::RevokeSessionResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::Session)
          res.session = out
        end
      elsif [400, 401, 404].include?(r.status)
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::ClerkErrors)
          res.clerk_errors = out
        end
      end
      res
    end


    sig { params(session_id: ::String, template_name: ::String).returns(::ClerkSDKBackend::Operations::CreateSessionTokenFromTemplateResponse) }
    def create_token(session_id, template_name)
      # create_token - Create a session token from a jwt template
      # Creates a JSON Web Token(JWT) based on a session and a JWT Template name defined for your instance
      request = ::ClerkSDKBackend::Operations::CreateSessionTokenFromTemplateRequest.new(
        
        session_id: session_id,
        template_name: template_name
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::ClerkSDKBackend::Operations::CreateSessionTokenFromTemplateRequest,
        base_url,
        '/sessions/{session_id}/tokens/{template_name}',
        request
      )
      headers = {}
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::ClerkSDKBackend::Operations::CreateSessionTokenFromTemplateResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Operations::CreateSessionTokenFromTemplateResponseBody)
          res.object = out
        end
      elsif [401, 404].include?(r.status)
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::ClerkErrors)
          res.clerk_errors = out
        end
      end
      res
    end
  end
end
