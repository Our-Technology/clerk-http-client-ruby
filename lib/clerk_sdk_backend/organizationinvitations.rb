# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module ClerkSDKBackend
  extend T::Sig
  class OrganizationInvitations
    extend T::Sig


    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end


    sig { params(request: T.nilable(::ClerkSDKBackend::Operations::ListInstanceOrganizationInvitationsRequest)).returns(::ClerkSDKBackend::Operations::ListInstanceOrganizationInvitationsResponse) }
    def all(request)
      # all - Get a list of organization invitations for the current instance
      # This request returns the list of organization invitations for the instance.
      # Results can be paginated using the optional `limit` and `offset` query parameters.
      # You can filter them by providing the 'status' query parameter, that accepts multiple values.
      # You can change the order by providing the 'order' query parameter, that accepts multiple values.
      # You can filter by the invited user email address providing the `query` query parameter.
      # The organization invitations are ordered by descending creation date by default.
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/organization_invitations"
      headers = {}
      query_params = Utils.get_query_params(::ClerkSDKBackend::Operations::ListInstanceOrganizationInvitationsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::ClerkSDKBackend::Operations::ListInstanceOrganizationInvitationsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::OrganizationInvitationsWithPublicOrganizationData)
          res.organization_invitations_with_public_organization_data = out
        end
      elsif [400, 404, 422, 500].include?(r.status)
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::ClerkErrors)
          res.clerk_errors = out
        end
      end
      res
    end


    sig { params(organization_id: ::String, request_body: ::ClerkSDKBackend::Operations::CreateOrganizationInvitationRequestBody).returns(::ClerkSDKBackend::Operations::CreateOrganizationInvitationResponse) }
    def create(organization_id, request_body)
      # create - Create and send an organization invitation
      # Creates a new organization invitation and sends an email to the provided `email_address` with a link to accept the invitation and join the organization.
      # You can specify the `role` for the invited organization member.
      # 
      # New organization invitations get a "pending" status until they are revoked by an organization administrator or accepted by the invitee.
      # 
      # The request body supports passing an optional `redirect_url` parameter.
      # When the invited user clicks the link to accept the invitation, they will be redirected to the URL provided.
      # Use this parameter to implement a custom invitation acceptance flow.
      # 
      # You can specify the ID of the user that will send the invitation with the `inviter_user_id` parameter.
      # That user must be a member with administrator privileges in the organization.
      # Only "admin" members can create organization invitations.
      # 
      # You can optionally provide public and private metadata for the organization invitation.
      # The public metadata are visible by both the Frontend and the Backend whereas the private ones only by the Backend.
      # When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
      request = ::ClerkSDKBackend::Operations::CreateOrganizationInvitationRequest.new(
        
        organization_id: organization_id,
        request_body: request_body
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::ClerkSDKBackend::Operations::CreateOrganizationInvitationRequest,
        base_url,
        '/organizations/{organization_id}/invitations',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::ClerkSDKBackend::Operations::CreateOrganizationInvitationResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::OrganizationInvitation)
          res.organization_invitation = out
        end
      elsif [400, 403, 404, 422].include?(r.status)
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::ClerkErrors)
          res.clerk_errors = out
        end
      end
      res
    end


    sig { params(organization_id: ::String, limit: T.nilable(::Float), offset: T.nilable(::Float), status: T.nilable(::ClerkSDKBackend::Operations::ListOrganizationInvitationsQueryParamStatus)).returns(::ClerkSDKBackend::Operations::ListOrganizationInvitationsResponse) }
    def find_by_organization(organization_id, limit = nil, offset = nil, status = nil)
      # find_by_organization - Get a list of organization invitations
      # This request returns the list of organization invitations.
      # Results can be paginated using the optional `limit` and `offset` query parameters.
      # You can filter them by providing the 'status' query parameter, that accepts multiple values.
      # The organization invitations are ordered by descending creation date.
      # Most recent invitations will be returned first.
      # Any invitations created as a result of an Organization Domain are not included in the results.
      request = ::ClerkSDKBackend::Operations::ListOrganizationInvitationsRequest.new(
        
        organization_id: organization_id,
        limit: limit,
        offset: offset,
        status: status
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::ClerkSDKBackend::Operations::ListOrganizationInvitationsRequest,
        base_url,
        '/organizations/{organization_id}/invitations',
        request
      )
      headers = {}
      query_params = Utils.get_query_params(::ClerkSDKBackend::Operations::ListOrganizationInvitationsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::ClerkSDKBackend::Operations::ListOrganizationInvitationsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::OrganizationInvitations)
          res.organization_invitations = out
        end
      elsif [400, 404].include?(r.status)
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::ClerkErrors)
          res.clerk_errors = out
        end
      end
      res
    end


    sig { params(organization_id: ::String, request_body: T::Array[::ClerkSDKBackend::Operations::RequestBody]).returns(::ClerkSDKBackend::Operations::CreateOrganizationInvitationBulkResponse) }
    def create_bulk(organization_id, request_body)
      # create_bulk - Bulk create and send organization invitations
      # Creates new organization invitations in bulk and sends out emails to the provided email addresses with a link to accept the invitation and join the organization.
      # You can specify a different `role` for each invited organization member.
      # New organization invitations get a "pending" status until they are revoked by an organization administrator or accepted by the invitee.
      # The request body supports passing an optional `redirect_url` parameter for each invitation.
      # When the invited user clicks the link to accept the invitation, they will be redirected to the provided URL.
      # Use this parameter to implement a custom invitation acceptance flow.
      # You can specify the ID of the user that will send the invitation with the `inviter_user_id` parameter. Each invitation
      # can have a different inviter user.
      # Inviter users must be members with administrator privileges in the organization.
      # Only "admin" members can create organization invitations.
      # You can optionally provide public and private metadata for each organization invitation. The public metadata are visible
      # by both the Frontend and the Backend, whereas the private metadata are only visible by the Backend.
      # When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
      request = ::ClerkSDKBackend::Operations::CreateOrganizationInvitationBulkRequest.new(
        
        organization_id: organization_id,
        request_body: request_body
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::ClerkSDKBackend::Operations::CreateOrganizationInvitationBulkRequest,
        base_url,
        '/organizations/{organization_id}/invitations/bulk',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::ClerkSDKBackend::Operations::CreateOrganizationInvitationBulkResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::OrganizationInvitations)
          res.organization_invitations = out
        end
      elsif [400, 403, 404, 422].include?(r.status)
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::ClerkErrors)
          res.clerk_errors = out
        end
      end
      res
    end


    sig { params(organization_id: ::String, invitation_id: ::String).returns(::ClerkSDKBackend::Operations::GetOrganizationInvitationResponse) }
    def find(organization_id, invitation_id)
      # find - Retrieve an organization invitation by ID
      # Use this request to get an existing organization invitation by ID.
      request = ::ClerkSDKBackend::Operations::GetOrganizationInvitationRequest.new(
        
        organization_id: organization_id,
        invitation_id: invitation_id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::ClerkSDKBackend::Operations::GetOrganizationInvitationRequest,
        base_url,
        '/organizations/{organization_id}/invitations/{invitation_id}',
        request
      )
      headers = {}
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::ClerkSDKBackend::Operations::GetOrganizationInvitationResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::OrganizationInvitation)
          res.organization_invitation = out
        end
      elsif [400, 403, 404].include?(r.status)
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::ClerkErrors)
          res.clerk_errors = out
        end
      end
      res
    end


    sig { params(organization_id: ::String, invitation_id: ::String, request_body: T.nilable(::ClerkSDKBackend::Operations::RevokeOrganizationInvitationRequestBody)).returns(::ClerkSDKBackend::Operations::RevokeOrganizationInvitationResponse) }
    def delete(organization_id, invitation_id, request_body = nil)
      # delete - Revoke a pending organization invitation
      # Use this request to revoke a previously issued organization invitation.
      # Revoking an organization invitation makes it invalid; the invited user will no longer be able to join the organization with the revoked invitation.
      # Only organization invitations with "pending" status can be revoked.
      # The request accepts the `requesting_user_id` parameter to specify the user which revokes the invitation.
      # Only users with "admin" role can revoke invitations.
      request = ::ClerkSDKBackend::Operations::RevokeOrganizationInvitationRequest.new(
        
        organization_id: organization_id,
        invitation_id: invitation_id,
        request_body: request_body
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::ClerkSDKBackend::Operations::RevokeOrganizationInvitationRequest,
        base_url,
        '/organizations/{organization_id}/invitations/{invitation_id}/revoke',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::ClerkSDKBackend::Operations::RevokeOrganizationInvitationResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::OrganizationInvitation)
          res.organization_invitation = out
        end
      elsif [400, 403, 404].include?(r.status)
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::ClerkErrors)
          res.clerk_errors = out
        end
      end
      res
    end
  end
end
