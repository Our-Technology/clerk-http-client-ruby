# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module ClerkSDKBackend
  extend T::Sig
  class Miscellaneous
    extend T::Sig
    # Various endpoints that do not belong in any particular category.

    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end


    sig { params(frontend_api: T.nilable(::String), publishable_key: T.nilable(::String)).returns(::ClerkSDKBackend::Operations::GetPublicInterstitialResponse) }
    def get_public_interstitial(frontend_api = nil, publishable_key = nil)
      # get_public_interstitial - Returns the markup for the interstitial page
      # The Clerk interstitial endpoint serves an html page that loads clerk.js in order to check the user's authentication state.
      # It is used by Clerk SDKs when the user's authentication state cannot be immediately determined.
      request = ::ClerkSDKBackend::Operations::GetPublicInterstitialRequest.new(
        
        frontend_api: frontend_api,
        publishable_key: publishable_key
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/public/interstitial"
      headers = {}
      query_params = Utils.get_query_params(::ClerkSDKBackend::Operations::GetPublicInterstitialRequest, request)
      headers['Accept'] = '*/*'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::ClerkSDKBackend::Operations::GetPublicInterstitialResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      
      res
    end
  end
end
