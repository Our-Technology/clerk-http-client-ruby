# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module ClerkSDKBackend
  module Operations
  

    class UpdateSAMLConnectionRequestBody < ::ClerkSDKBackend::Utils::FieldAugmented
      extend T::Sig

      # Activate or de-activate the SAML Connection
      field :active, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('active') } }
      # Enable or deactivate IdP-initiated flows
      field :allow_idp_initiated, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('allow_idp_initiated') } }
      # Allow users with an email address subdomain to use this connection in order to authenticate
      field :allow_subdomains, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('allow_subdomains') } }
      # Define the atrtibute name mapping between Identity Provider and Clerk's user properties
      field :attribute_mapping, T.nilable(::ClerkSDKBackend::Operations::UpdateSAMLConnectionAttributeMapping), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('attribute_mapping') } }
      # Enable or deactivate additional identifications
      field :disable_additional_identifications, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('disable_additional_identifications') } }
      # The domain to use for the new SAML Connection
      field :domain, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('domain') } }
      # The x509 certificated as provided by the IdP
      field :idp_certificate, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('idp_certificate') } }
      # The entity id as provided by the IdP
      field :idp_entity_id, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('idp_entity_id') } }
      # The XML content of the IdP metadata file. If present, it takes priority over the corresponding individual properties
      field :idp_metadata, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('idp_metadata') } }
      # The URL which serves the IdP metadata. If present, it takes priority over the corresponding individual properties and replaces them
      field :idp_metadata_url, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('idp_metadata_url') } }
      # The SSO url as provided by the IdP
      field :idp_sso_url, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('idp_sso_url') } }
      # The name of the new SAML Connection
      field :name, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('name') } }
      # Controls whether to update the user's attributes in each sign-in
      field :sync_user_attributes, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('sync_user_attributes') } }


      sig { params(active: T.nilable(T::Boolean), allow_idp_initiated: T.nilable(T::Boolean), allow_subdomains: T.nilable(T::Boolean), attribute_mapping: T.nilable(::ClerkSDKBackend::Operations::UpdateSAMLConnectionAttributeMapping), disable_additional_identifications: T.nilable(T::Boolean), domain: T.nilable(::String), idp_certificate: T.nilable(::String), idp_entity_id: T.nilable(::String), idp_metadata: T.nilable(::String), idp_metadata_url: T.nilable(::String), idp_sso_url: T.nilable(::String), name: T.nilable(::String), sync_user_attributes: T.nilable(T::Boolean)).void }
      def initialize(active: nil, allow_idp_initiated: nil, allow_subdomains: nil, attribute_mapping: nil, disable_additional_identifications: nil, domain: nil, idp_certificate: nil, idp_entity_id: nil, idp_metadata: nil, idp_metadata_url: nil, idp_sso_url: nil, name: nil, sync_user_attributes: nil)
        @active = active
        @allow_idp_initiated = allow_idp_initiated
        @allow_subdomains = allow_subdomains
        @attribute_mapping = attribute_mapping
        @disable_additional_identifications = disable_additional_identifications
        @domain = domain
        @idp_certificate = idp_certificate
        @idp_entity_id = idp_entity_id
        @idp_metadata = idp_metadata
        @idp_metadata_url = idp_metadata_url
        @idp_sso_url = idp_sso_url
        @name = name
        @sync_user_attributes = sync_user_attributes
      end
    end
  end
end
