# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module ClerkSDKBackend
  module Operations
  

    class ListOrganizationsRequest < ::ClerkSDKBackend::Utils::FieldAugmented
      extend T::Sig

      # Flag to denote whether the member counts of each organization should be included in the response or not.
      field :include_members_count, T.nilable(T::Boolean), { 'query_param': { 'field_name': 'include_members_count', 'style': 'form', 'explode': true } }
      # Applies a limit to the number of results returned.
      # Can be used for paginating the results together with `offset`.
      field :limit, T.nilable(::Float), { 'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': true } }
      # Skip the first `offset` results when paginating.
      # Needs to be an integer greater or equal to zero.
      # To be used in conjunction with `limit`.
      field :offset, T.nilable(::Float), { 'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': true } }
      # Allows to return organizations in a particular order.
      # At the moment, you can order the returned organizations either by their `name`, `created_at` or `members_count`.
      # In order to specify the direction, you can use the `+/-` symbols prepended in the property to order by.
      # For example, if you want organizations to be returned in descending order according to their `created_at` property, you can use `-created_at`.
      # If you don't use `+` or `-`, then `+` is implied.
      # Defaults to `-created_at`.
      field :order_by, T.nilable(::String), { 'query_param': { 'field_name': 'order_by', 'style': 'form', 'explode': true } }
      # Returns organizations with ID, name, or slug that match the given query.
      # Uses exact match for organization ID and partial match for name and slug.
      field :query, T.nilable(::String), { 'query_param': { 'field_name': 'query', 'style': 'form', 'explode': true } }


      sig { params(include_members_count: T.nilable(T::Boolean), limit: T.nilable(::Float), offset: T.nilable(::Float), order_by: T.nilable(::String), query: T.nilable(::String)).void }
      def initialize(include_members_count: nil, limit: nil, offset: nil, order_by: nil, query: nil)
        @include_members_count = include_members_count
        @limit = limit
        @offset = offset
        @order_by = order_by
        @query = query
      end
    end
  end
end
