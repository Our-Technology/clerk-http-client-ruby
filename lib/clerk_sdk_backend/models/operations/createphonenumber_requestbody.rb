# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module ClerkSDKBackend
  module Operations
  

    class CreatePhoneNumberRequestBody < ::ClerkSDKBackend::Utils::FieldAugmented
      extend T::Sig

      # The new phone number. Must adhere to the E.164 standard for phone number format.
      field :phone_number, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('phone_number') } }
      # Create this phone number as the primary phone number for the user.
      # Default: false, unless it is the first phone number.
      field :primary, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('primary') } }
      # Create this phone number as reserved for multi-factor authentication.
      # The phone number must also be verified.
      # If there are no other reserved second factors, the phone number will be set as the default second factor.
      field :reserved_for_second_factor, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('reserved_for_second_factor') } }
      # The ID representing the user
      field :user_id, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('user_id') } }
      # When created, the phone number will be marked as verified.
      field :verified, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('verified') } }


      sig { params(phone_number: T.nilable(::String), primary: T.nilable(T::Boolean), reserved_for_second_factor: T.nilable(T::Boolean), user_id: T.nilable(::String), verified: T.nilable(T::Boolean)).void }
      def initialize(phone_number: nil, primary: nil, reserved_for_second_factor: nil, user_id: nil, verified: nil)
        @phone_number = phone_number
        @primary = primary
        @reserved_for_second_factor = reserved_for_second_factor
        @user_id = user_id
        @verified = verified
      end
    end
  end
end
