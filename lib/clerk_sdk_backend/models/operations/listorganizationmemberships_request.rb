# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module ClerkSDKBackend
  module Operations
  

    class ListOrganizationMembershipsRequest < ::ClerkSDKBackend::Utils::FieldAugmented
      extend T::Sig

      # The organization ID.
      field :organization_id, ::String, { 'path_param': { 'field_name': 'organization_id', 'style': 'simple', 'explode': false } }
      # Applies a limit to the number of results returned.
      # Can be used for paginating the results together with `offset`.
      field :limit, T.nilable(::Float), { 'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': true } }
      # Skip the first `offset` results when paginating.
      # Needs to be an integer greater or equal to zero.
      # To be used in conjunction with `limit`.
      field :offset, T.nilable(::Float), { 'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': true } }
      # Sorts organizations memberships by phone_number, email_address, created_at, first_name, last_name or username.
      # By prepending one of those values with + or -,
      # we can choose to sort in ascending (ASC) or descending (DESC) order."
      field :order_by, T.nilable(::String), { 'query_param': { 'field_name': 'order_by', 'style': 'form', 'explode': true } }


      sig { params(organization_id: ::String, limit: T.nilable(::Float), offset: T.nilable(::Float), order_by: T.nilable(::String)).void }
      def initialize(organization_id: nil, limit: nil, offset: nil, order_by: nil)
        @organization_id = organization_id
        @limit = limit
        @offset = offset
        @order_by = order_by
      end
    end
  end
end
