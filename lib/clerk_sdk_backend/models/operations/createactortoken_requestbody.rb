# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module ClerkSDKBackend
  module Operations
  

    class CreateActorTokenRequestBody < ::ClerkSDKBackend::Utils::FieldAugmented
      extend T::Sig

      # The actor payload. It needs to include a sub property which should contain the ID of the actor.
      # This whole payload will be also included in the JWT session token.
      field :actor, ::ClerkSDKBackend::Operations::Actor, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('actor') } }
      # The ID of the user being impersonated.
      field :user_id, ::String, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('user_id') } }
      # Optional parameter to specify the life duration of the actor token in seconds.
      # By default, the duration is 1 hour.
      field :expires_in_seconds, T.nilable(::Integer), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('expires_in_seconds') } }
      # The maximum duration that the session which will be created by the generated actor token should last.
      # By default, the duration of a session created via an actor token, lasts 30 minutes.
      field :session_max_duration_in_seconds, T.nilable(::Integer), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('session_max_duration_in_seconds') } }


      sig { params(actor: ::ClerkSDKBackend::Operations::Actor, user_id: ::String, expires_in_seconds: T.nilable(::Integer), session_max_duration_in_seconds: T.nilable(::Integer)).void }
      def initialize(actor: nil, user_id: nil, expires_in_seconds: nil, session_max_duration_in_seconds: nil)
        @actor = actor
        @user_id = user_id
        @expires_in_seconds = expires_in_seconds
        @session_max_duration_in_seconds = session_max_duration_in_seconds
      end
    end
  end
end
