# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module ClerkSDKBackend
  module Operations
  

    class UpdateDomainRequestBody < ::ClerkSDKBackend::Utils::FieldAugmented
      extend T::Sig

      # Whether this is a domain for a secondary app, meaning that any subdomain provided is significant and
      # will be stored as part of the domain. This is useful for supporting multiple apps (one primary and
      # multiple secondaries) on the same root domain (eTLD+1).
      field :is_secondary, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('is_secondary') } }
      # The new domain name. For development instances, can contain the port,
      # i.e `myhostname:3000`. For production instances, must be a valid FQDN,
      # i.e `mysite.com`. Cannot contain protocol scheme.
      field :name, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('name') } }
      # The full URL of the proxy that will forward requests to Clerk's Frontend API.
      # Can only be updated for production instances.
      field :proxy_url, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('proxy_url') } }


      sig { params(is_secondary: T.nilable(T::Boolean), name: T.nilable(::String), proxy_url: T.nilable(::String)).void }
      def initialize(is_secondary: nil, name: nil, proxy_url: nil)
        @is_secondary = is_secondary
        @name = name
        @proxy_url = proxy_url
      end
    end
  end
end
