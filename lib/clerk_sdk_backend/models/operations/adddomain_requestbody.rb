# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module ClerkSDKBackend
  module Operations
  

    class AddDomainRequestBody < ::ClerkSDKBackend::Utils::FieldAugmented
      extend T::Sig

      # Marks the new domain as satellite. Only `true` is accepted at the moment.
      field :is_satellite, ::ClerkSDKBackend::Operations::IsSatellite, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('is_satellite'), 'decoder': Utils.enum_from_string(::ClerkSDKBackend::Operations::IsSatellite, false) } }
      # The new domain name. Can contain the port for development instances.
      field :name, ::String, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('name') } }
      # The full URL of the proxy which will forward requests to the Clerk Frontend API for this domain. Applicable only to production instances.
      field :proxy_url, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('proxy_url') } }


      sig { params(is_satellite: ::ClerkSDKBackend::Operations::IsSatellite, name: ::String, proxy_url: T.nilable(::String)).void }
      def initialize(is_satellite: nil, name: nil, proxy_url: nil)
        @is_satellite = is_satellite
        @name = name
        @proxy_url = proxy_url
      end
    end
  end
end
