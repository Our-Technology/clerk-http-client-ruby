# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module ClerkSDKBackend
  module Operations
  

    class UpdateInstanceRequestBody < ::ClerkSDKBackend::Utils::FieldAugmented
      extend T::Sig

      # For browser-like stacks such as browser extensions, Electron, or Capacitor.js the instance allowed origins need to be updated with the request origin value.
      # For Chrome extensions popup, background, or service worker pages the origin is chrome-extension://extension_uiid. For Electron apps the default origin is http://localhost:3000. For Capacitor, the origin is capacitor://localhost.
      field :allowed_origins, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('allowed_origins') } }

      field :clerk_js_version, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('clerk_js_version') } }
      # Whether the instance should operate in cookieless development mode (i.e. without third-party cookies).
      # Deprecated: Please use `url_based_session_syncing` instead.
      # 
      # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
      field :cookieless_dev, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('cookieless_dev') } }

      field :development_origin, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('development_origin') } }
      # The "enhanced_email_deliverability" feature will send emails from "verifications@clerk.dev" instead of your domain.
      # This can be helpful if you do not have a high domain reputation.
      field :enhanced_email_deliverability, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('enhanced_email_deliverability') } }
      # Whether the instance should be using the HIBP service to check passwords for breaches
      field :hibp, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('hibp') } }

      field :support_email, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('support_email') } }
      # Toggles test mode for this instance, allowing the use of test email addresses and phone numbers.
      # Defaults to true for development instances.
      field :test_mode, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('test_mode') } }
      # Whether the instance should use URL-based session syncing in development mode (i.e. without third-party cookies).
      field :url_based_session_syncing, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('url_based_session_syncing') } }


      sig { params(allowed_origins: T.nilable(T::Array[::String]), clerk_js_version: T.nilable(::String), cookieless_dev: T.nilable(T::Boolean), development_origin: T.nilable(::String), enhanced_email_deliverability: T.nilable(T::Boolean), hibp: T.nilable(T::Boolean), support_email: T.nilable(::String), test_mode: T.nilable(T::Boolean), url_based_session_syncing: T.nilable(T::Boolean)).void }
      def initialize(allowed_origins: nil, clerk_js_version: nil, cookieless_dev: nil, development_origin: nil, enhanced_email_deliverability: nil, hibp: nil, support_email: nil, test_mode: nil, url_based_session_syncing: nil)
        @allowed_origins = allowed_origins
        @clerk_js_version = clerk_js_version
        @cookieless_dev = cookieless_dev
        @development_origin = development_origin
        @enhanced_email_deliverability = enhanced_email_deliverability
        @hibp = hibp
        @support_email = support_email
        @test_mode = test_mode
        @url_based_session_syncing = url_based_session_syncing
      end
    end
  end
end
