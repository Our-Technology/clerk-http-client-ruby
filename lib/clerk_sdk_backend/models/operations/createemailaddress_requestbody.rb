# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module ClerkSDKBackend
  module Operations
  

    class CreateEmailAddressRequestBody < ::ClerkSDKBackend::Utils::FieldAugmented
      extend T::Sig

      # The new email address. Must adhere to the RFC 5322 specification for email address format.
      field :email_address, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('email_address') } }
      # Create this email address as the primary email address for the user.
      # Default: false, unless it is the first email address.
      field :primary, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('primary') } }
      # The ID representing the user
      field :user_id, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('user_id') } }
      # When created, the email address will be marked as verified.
      field :verified, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('verified') } }


      sig { params(email_address: T.nilable(::String), primary: T.nilable(T::Boolean), user_id: T.nilable(::String), verified: T.nilable(T::Boolean)).void }
      def initialize(email_address: nil, primary: nil, user_id: nil, verified: nil)
        @email_address = email_address
        @primary = primary
        @user_id = user_id
        @verified = verified
      end
    end
  end
end
