# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module ClerkSDKBackend
  module Operations
  

    class CreateSAMLConnectionRequestBody < ::ClerkSDKBackend::Utils::FieldAugmented
      extend T::Sig

      # The domain of your organization. Sign in flows using an email with this domain, will use this SAML Connection.
      field :domain, ::String, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('domain') } }
      # The name to use as a label for this SAML Connection
      field :name, ::String, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('name') } }
      # The IdP provider of the connection.
      field :provider, ::ClerkSDKBackend::Operations::Provider, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('provider'), 'decoder': Utils.enum_from_string(::ClerkSDKBackend::Operations::Provider, false) } }
      # Define the attribute name mapping between Identity Provider and Clerk's user properties
      field :attribute_mapping, T.nilable(::ClerkSDKBackend::Operations::AttributeMapping), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('attribute_mapping') } }
      # The X.509 certificate as provided by the IdP
      field :idp_certificate, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('idp_certificate') } }
      # The Entity ID as provided by the IdP
      field :idp_entity_id, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('idp_entity_id') } }
      # The XML content of the IdP metadata file. If present, it takes priority over the corresponding individual properties
      field :idp_metadata, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('idp_metadata') } }
      # The URL which serves the IdP metadata. If present, it takes priority over the corresponding individual properties
      field :idp_metadata_url, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('idp_metadata_url') } }
      # The Single-Sign On URL as provided by the IdP
      field :idp_sso_url, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('idp_sso_url') } }


      sig { params(domain: ::String, name: ::String, provider: ::ClerkSDKBackend::Operations::Provider, attribute_mapping: T.nilable(::ClerkSDKBackend::Operations::AttributeMapping), idp_certificate: T.nilable(::String), idp_entity_id: T.nilable(::String), idp_metadata: T.nilable(::String), idp_metadata_url: T.nilable(::String), idp_sso_url: T.nilable(::String)).void }
      def initialize(domain: nil, name: nil, provider: nil, attribute_mapping: nil, idp_certificate: nil, idp_entity_id: nil, idp_metadata: nil, idp_metadata_url: nil, idp_sso_url: nil)
        @domain = domain
        @name = name
        @provider = provider
        @attribute_mapping = attribute_mapping
        @idp_certificate = idp_certificate
        @idp_entity_id = idp_entity_id
        @idp_metadata = idp_metadata
        @idp_metadata_url = idp_metadata_url
        @idp_sso_url = idp_sso_url
      end
    end
  end
end
