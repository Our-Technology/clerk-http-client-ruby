# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module ClerkSDKBackend
  module Operations
  

    class ChangeProductionInstanceDomainRequestBody < ::ClerkSDKBackend::Utils::FieldAugmented
      extend T::Sig

      # The new home URL of the production instance e.g. https://www.example.com
      field :home_url, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('home_url') } }
      # Whether this is a domain for a secondary app, meaning that any subdomain provided is significant and
      # will be stored as part of the domain. This is useful for supporting multiple apps (one primary and
      # multiple secondaries) on the same root domain (eTLD+1).
      field :is_secondary, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('is_secondary') } }


      sig { params(home_url: T.nilable(::String), is_secondary: T.nilable(T::Boolean)).void }
      def initialize(home_url: nil, is_secondary: nil)
        @home_url = home_url
        @is_secondary = is_secondary
      end
    end
  end
end
