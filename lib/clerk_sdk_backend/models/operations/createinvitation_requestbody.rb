# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module ClerkSDKBackend
  module Operations
  
    # Required parameters
    class CreateInvitationRequestBody < ::ClerkSDKBackend::Utils::FieldAugmented
      extend T::Sig

      # The email address the invitation will be sent to
      field :email_address, ::String, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('email_address') } }
      # The number of days the invitation will be valid for. By default, the invitation does not expire.
      field :expires_in_days, T.nilable(::Integer), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('expires_in_days') } }
      # Whether an invitation should be created if there is already an existing invitation for this email address, or it's claimed by another user.
      field :ignore_existing, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('ignore_existing') } }
      # Optional flag which denotes whether an email invitation should be sent to the given email address.
      # Defaults to true.
      field :notify, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('notify') } }
      # Metadata that will be attached to the newly created invitation.
      # The value of this property should be a well-formed JSON object.
      # Once the user accepts the invitation and signs up, these metadata will end up in the user's public metadata.
      field :public_metadata, T.nilable(::ClerkSDKBackend::Operations::CreateInvitationPublicMetadata), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('public_metadata') } }
      # Optional URL which specifies where to redirect the user once they click the invitation link.
      # This is only required if you have implemented a [custom flow](https://clerk.com/docs/authentication/invitations#custom-flow) and you're not using Clerk Hosted Pages or Clerk Components.
      field :redirect_url, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('redirect_url') } }


      sig { params(email_address: ::String, expires_in_days: T.nilable(::Integer), ignore_existing: T.nilable(T::Boolean), notify: T.nilable(T::Boolean), public_metadata: T.nilable(::ClerkSDKBackend::Operations::CreateInvitationPublicMetadata), redirect_url: T.nilable(::String)).void }
      def initialize(email_address: nil, expires_in_days: nil, ignore_existing: nil, notify: nil, public_metadata: nil, redirect_url: nil)
        @email_address = email_address
        @expires_in_days = expires_in_days
        @ignore_existing = ignore_existing
        @notify = notify
        @public_metadata = public_metadata
        @redirect_url = redirect_url
      end
    end
  end
end
