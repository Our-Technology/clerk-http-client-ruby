# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module ClerkSDKBackend
  module Operations
  

    class CreateUserRequestBody < ::ClerkSDKBackend::Utils::FieldAugmented
      extend T::Sig

      # If Backup Codes are configured on the instance, you can provide them to enable it on the newly created user without the need to reset them.
      # You must provide the backup codes in plain format or the corresponding bcrypt digest.
      field :backup_codes, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('backup_codes') } }
      # If enabled, user can create organizations via FAPI.
      # 
      field :create_organization_enabled, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('create_organization_enabled') } }
      # The maximum number of organizations the user can create. 0 means unlimited.
      # 
      field :create_organizations_limit, T.nilable(::Integer), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('create_organizations_limit') } }
      # A custom date/time denoting _when_ the user signed up to the application, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
      field :created_at, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('created_at') } }
      # If enabled, user can delete themselves via FAPI.
      # 
      field :delete_self_enabled, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('delete_self_enabled') } }
      # Email addresses to add to the user.
      # Must be unique across your instance.
      # The first email address will be set as the user's primary email address.
      field :email_address, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('email_address') } }
      # The ID of the user as used in your external systems or your previous authentication solution.
      # Must be unique across your instance.
      field :external_id, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('external_id') } }
      # The first name to assign to the user
      field :first_name, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('first_name') } }
      # The last name to assign to the user
      field :last_name, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('last_name') } }
      # A custom timestamp denoting _when_ the user accepted legal requirements, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
      field :legal_accepted_at, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('legal_accepted_at') } }
      # The plaintext password to give the user.
      # Must be at least 8 characters long, and can not be in any list of hacked passwords.
      field :password, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('password') } }
      # In case you already have the password digests and not the passwords, you can use them for the newly created user via this property.
      # The digests should be generated with one of the supported algorithms.
      # The hashing algorithm can be specified using the `password_hasher` property.
      field :password_digest, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('password_digest') } }
      # The hashing algorithm that was used to generate the password digest.
      # 
      # The algorithms we support at the moment are [`bcrypt`](https://en.wikipedia.org/wiki/Bcrypt), [`bcrypt_sha256_django`](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/), [`md5`](https://en.wikipedia.org/wiki/MD5), `pbkdf2_sha1`, `pbkdf2_sha256`, [`pbkdf2_sha256_django`](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/),
      # [`phpass`](https://www.openwall.com/phpass/), [`scrypt_firebase`](https://firebaseopensource.com/projects/firebase/scrypt/),
      # [`scrypt_werkzeug`](https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.security.generate_password_hash), [`sha256`](https://en.wikipedia.org/wiki/SHA-2),
      # and the [`argon2`](https://argon2.online/) variants: `argon2i` and `argon2id`.
      # 
      # Each of the supported hashers expects the incoming digest to be in a particular format. See the [Clerk docs](https://clerk.com/docs/references/backend/user/create-user) for more information.
      field :password_hasher, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('password_hasher') } }
      # Phone numbers to add to the user.
      # Must be unique across your instance.
      # The first phone number will be set as the user's primary phone number.
      field :phone_number, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('phone_number') } }
      # Metadata saved on the user, that is only visible to your Backend API
      field :private_metadata, T.nilable(::ClerkSDKBackend::Operations::PrivateMetadata), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('private_metadata') } }
      # Metadata saved on the user, that is visible to both your Frontend and Backend APIs
      field :public_metadata, T.nilable(::ClerkSDKBackend::Operations::PublicMetadata), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('public_metadata') } }
      # When set to `true` all legal checks are skipped.
      # It is not recommended to skip legal checks unless you are migrating a user to Clerk.
      field :skip_legal_checks, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('skip_legal_checks') } }
      # When set to `true` all password checks are skipped.
      # It is recommended to use this method only when migrating plaintext passwords to Clerk.
      # Upon migration the user base should be prompted to pick stronger password.
      field :skip_password_checks, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('skip_password_checks') } }
      # When set to `true`, `password` is not required anymore when creating the user and can be omitted.
      # This is useful when you are trying to create a user that doesn't have a password, in an instance that is using passwords.
      # Please note that you cannot use this flag if password is the only way for a user to sign into your instance.
      field :skip_password_requirement, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('skip_password_requirement') } }
      # In case TOTP is configured on the instance, you can provide the secret to enable it on the newly created user without the need to reset it.
      # Please note that currently the supported options are:
      # * Period: 30 seconds
      # * Code length: 6 digits
      # * Algorithm: SHA1
      field :totp_secret, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('totp_secret') } }
      # Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.
      # Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.
      field :unsafe_metadata, T.nilable(::ClerkSDKBackend::Operations::UnsafeMetadata), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('unsafe_metadata') } }
      # The username to give to the user.
      # It must be unique across your instance.
      field :username, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('username') } }
      # Web3 wallets to add to the user.
      # Must be unique across your instance.
      # The first wallet will be set as the user's primary wallet.
      field :web3_wallet, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('web3_wallet') } }


      sig { params(backup_codes: T.nilable(T::Array[::String]), create_organization_enabled: T.nilable(T::Boolean), create_organizations_limit: T.nilable(::Integer), created_at: T.nilable(::String), delete_self_enabled: T.nilable(T::Boolean), email_address: T.nilable(T::Array[::String]), external_id: T.nilable(::String), first_name: T.nilable(::String), last_name: T.nilable(::String), legal_accepted_at: T.nilable(::String), password: T.nilable(::String), password_digest: T.nilable(::String), password_hasher: T.nilable(::String), phone_number: T.nilable(T::Array[::String]), private_metadata: T.nilable(::ClerkSDKBackend::Operations::PrivateMetadata), public_metadata: T.nilable(::ClerkSDKBackend::Operations::PublicMetadata), skip_legal_checks: T.nilable(T::Boolean), skip_password_checks: T.nilable(T::Boolean), skip_password_requirement: T.nilable(T::Boolean), totp_secret: T.nilable(::String), unsafe_metadata: T.nilable(::ClerkSDKBackend::Operations::UnsafeMetadata), username: T.nilable(::String), web3_wallet: T.nilable(T::Array[::String])).void }
      def initialize(backup_codes: nil, create_organization_enabled: nil, create_organizations_limit: nil, created_at: nil, delete_self_enabled: nil, email_address: nil, external_id: nil, first_name: nil, last_name: nil, legal_accepted_at: nil, password: nil, password_digest: nil, password_hasher: nil, phone_number: nil, private_metadata: nil, public_metadata: nil, skip_legal_checks: nil, skip_password_checks: nil, skip_password_requirement: nil, totp_secret: nil, unsafe_metadata: nil, username: nil, web3_wallet: nil)
        @backup_codes = backup_codes
        @create_organization_enabled = create_organization_enabled
        @create_organizations_limit = create_organizations_limit
        @created_at = created_at
        @delete_self_enabled = delete_self_enabled
        @email_address = email_address
        @external_id = external_id
        @first_name = first_name
        @last_name = last_name
        @legal_accepted_at = legal_accepted_at
        @password = password
        @password_digest = password_digest
        @password_hasher = password_hasher
        @phone_number = phone_number
        @private_metadata = private_metadata
        @public_metadata = public_metadata
        @skip_legal_checks = skip_legal_checks
        @skip_password_checks = skip_password_checks
        @skip_password_requirement = skip_password_requirement
        @totp_secret = totp_secret
        @unsafe_metadata = unsafe_metadata
        @username = username
        @web3_wallet = web3_wallet
      end
    end
  end
end
