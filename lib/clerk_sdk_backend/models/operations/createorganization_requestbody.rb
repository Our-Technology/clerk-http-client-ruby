# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module ClerkSDKBackend
  module Operations
  

    class CreateOrganizationRequestBody < ::ClerkSDKBackend::Utils::FieldAugmented
      extend T::Sig

      # The ID of the User who will become the administrator for the new organization
      field :created_by, ::String, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('created_by') } }
      # The name of the new organization.
      # May not contain URLs or HTML.
      field :name, ::String, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('name') } }
      # A custom date/time denoting _when_ the organization was created, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
      field :created_at, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('created_at') } }
      # The maximum number of memberships allowed for this organization
      field :max_allowed_memberships, T.nilable(::Integer), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('max_allowed_memberships') } }
      # Metadata saved on the organization, accessible only from the Backend API
      field :private_metadata, T.nilable(::ClerkSDKBackend::Operations::CreateOrganizationPrivateMetadata), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('private_metadata') } }
      # Metadata saved on the organization, read-only from the Frontend API and fully accessible (read/write) from the Backend API
      field :public_metadata, T.nilable(::ClerkSDKBackend::Operations::CreateOrganizationPublicMetadata), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('public_metadata') } }
      # A slug for the new organization.
      # Can contain only lowercase alphanumeric characters and the dash "-".
      # Must be unique for the instance.
      field :slug, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('slug') } }


      sig { params(created_by: ::String, name: ::String, created_at: T.nilable(::String), max_allowed_memberships: T.nilable(::Integer), private_metadata: T.nilable(::ClerkSDKBackend::Operations::CreateOrganizationPrivateMetadata), public_metadata: T.nilable(::ClerkSDKBackend::Operations::CreateOrganizationPublicMetadata), slug: T.nilable(::String)).void }
      def initialize(created_by: nil, name: nil, created_at: nil, max_allowed_memberships: nil, private_metadata: nil, public_metadata: nil, slug: nil)
        @created_by = created_by
        @name = name
        @created_at = created_at
        @max_allowed_memberships = max_allowed_memberships
        @private_metadata = private_metadata
        @public_metadata = public_metadata
        @slug = slug
      end
    end
  end
end
