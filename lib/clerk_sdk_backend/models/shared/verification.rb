# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module ClerkSDKBackend
  module Shared
  
    # Verification details for the domain
    class Verification < ::ClerkSDKBackend::Utils::FieldAugmented
      extend T::Sig

      # How many attempts have been made to verify the domain
      field :attempts, T.nilable(::Integer), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('attempts') } }
      # Unix timestamp of when the verification will expire
      field :expire_at, T.nilable(::Integer), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('expire_at') } }
      # Status of the verification. It can be `unverified` or `verified`
      field :status, T.nilable(::ClerkSDKBackend::Shared::OrganizationDomainStatus), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('status'), 'decoder': Utils.enum_from_string(::ClerkSDKBackend::Shared::OrganizationDomainStatus, true) } }
      # Name of the strategy used to verify the domain
      field :strategy, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('strategy') } }


      sig { params(attempts: T.nilable(::Integer), expire_at: T.nilable(::Integer), status: T.nilable(::ClerkSDKBackend::Shared::OrganizationDomainStatus), strategy: T.nilable(::String)).void }
      def initialize(attempts: nil, expire_at: nil, status: nil, strategy: nil)
        @attempts = attempts
        @expire_at = expire_at
        @status = status
        @strategy = strategy
      end
    end
  end
end
