# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module ClerkSDKBackend
  module Shared
  
    # Success
    class User < ::ClerkSDKBackend::Utils::FieldAugmented
      extend T::Sig


      field :backup_code_enabled, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('backup_code_enabled') } }
      # Flag to denote whether user is banned or not.
      # 
      field :banned, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('banned') } }
      # If enabled, user can create organizations via FAPI.
      # 
      field :create_organization_enabled, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('create_organization_enabled') } }
      # The maximum number of organizations the user can create. 0 means unlimited.
      # 
      field :create_organizations_limit, T.nilable(::Integer), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('create_organizations_limit') } }
      # Unix timestamp of creation.
      # 
      field :created_at, T.nilable(::Integer), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('created_at') } }
      # If enabled, user can delete themselves via FAPI.
      # 
      field :delete_self_enabled, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('delete_self_enabled') } }

      field :email_addresses, T.nilable(T::Array[::ClerkSDKBackend::Shared::EmailAddress]), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('email_addresses') } }

      field :external_accounts, T.nilable(T::Array[::ClerkSDKBackend::Shared::ExternalAccounts]), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('external_accounts') } }

      field :external_id, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('external_id') } }

      field :first_name, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('first_name') } }

      field :has_image, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('has_image') } }

      field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('id') } }

      field :image_url, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('image_url') } }
      # Unix timestamp of the latest session activity, with day precision.
      # 
      field :last_active_at, T.nilable(::Integer), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('last_active_at') } }

      field :last_name, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('last_name') } }
      # Unix timestamp of last sign-in.
      # 
      field :last_sign_in_at, T.nilable(::Integer), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('last_sign_in_at') } }
      # Unix timestamp of when the user accepted the legal requirements.
      # 
      field :legal_accepted_at, T.nilable(::Integer), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('legal_accepted_at') } }
      # Flag to denote whether user is currently locked, i.e. restricted from signing in or not.
      # 
      field :locked, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('locked') } }
      # The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.
      # 
      field :lockout_expires_in_seconds, T.nilable(::Integer), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('lockout_expires_in_seconds') } }
      # Unix timestamp of when MFA was last disabled for this user. It should be noted that this field is not nullified if MFA is enabled again.
      # 
      field :mfa_disabled_at, T.nilable(::Integer), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('mfa_disabled_at') } }
      # Unix timestamp of when MFA was last enabled for this user. It should be noted that this field is not nullified if MFA is disabled.
      # 
      field :mfa_enabled_at, T.nilable(::Integer), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('mfa_enabled_at') } }
      # String representing the object's type. Objects of the same type share the same value.
      # 
      field :object, T.nilable(::ClerkSDKBackend::Shared::UserObject), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('object'), 'decoder': Utils.enum_from_string(::ClerkSDKBackend::Shared::UserObject, true) } }

      field :passkeys, T.nilable(T::Array[::ClerkSDKBackend::Shared::SchemasPasskey]), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('passkeys') } }

      field :password_enabled, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('password_enabled') } }

      field :phone_numbers, T.nilable(T::Array[::ClerkSDKBackend::Shared::PhoneNumber]), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('phone_numbers') } }

      field :primary_email_address_id, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('primary_email_address_id') } }

      field :primary_phone_number_id, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('primary_phone_number_id') } }

      field :primary_web3_wallet_id, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('primary_web3_wallet_id') } }

      field :private_metadata, T.nilable(::ClerkSDKBackend::Shared::PrivateMetadata), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('private_metadata') } }
      # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
      field :profile_image_url, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('profile_image_url') } }

      field :public_metadata, T.nilable(::ClerkSDKBackend::Shared::PublicMetadata), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('public_metadata') } }

      field :saml_accounts, T.nilable(T::Array[::ClerkSDKBackend::Shared::SAMLAccount]), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('saml_accounts') } }

      field :totp_enabled, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('totp_enabled') } }

      field :two_factor_enabled, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('two_factor_enabled') } }

      field :unsafe_metadata, T.nilable(::ClerkSDKBackend::Shared::UnsafeMetadata), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('unsafe_metadata') } }
      # Unix timestamp of last update.
      # 
      field :updated_at, T.nilable(::Integer), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('updated_at') } }

      field :username, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('username') } }
      # The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.
      # 
      field :verification_attempts_remaining, T.nilable(::Integer), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('verification_attempts_remaining') } }

      field :web3_wallets, T.nilable(T::Array[::ClerkSDKBackend::Shared::Web3Wallet]), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('web3_wallets') } }


      sig { params(backup_code_enabled: T.nilable(T::Boolean), banned: T.nilable(T::Boolean), create_organization_enabled: T.nilable(T::Boolean), create_organizations_limit: T.nilable(::Integer), created_at: T.nilable(::Integer), delete_self_enabled: T.nilable(T::Boolean), email_addresses: T.nilable(T::Array[::ClerkSDKBackend::Shared::EmailAddress]), external_accounts: T.nilable(T::Array[::ClerkSDKBackend::Shared::ExternalAccounts]), external_id: T.nilable(::String), first_name: T.nilable(::String), has_image: T.nilable(T::Boolean), id: T.nilable(::String), image_url: T.nilable(::String), last_active_at: T.nilable(::Integer), last_name: T.nilable(::String), last_sign_in_at: T.nilable(::Integer), legal_accepted_at: T.nilable(::Integer), locked: T.nilable(T::Boolean), lockout_expires_in_seconds: T.nilable(::Integer), mfa_disabled_at: T.nilable(::Integer), mfa_enabled_at: T.nilable(::Integer), object: T.nilable(::ClerkSDKBackend::Shared::UserObject), passkeys: T.nilable(T::Array[::ClerkSDKBackend::Shared::SchemasPasskey]), password_enabled: T.nilable(T::Boolean), phone_numbers: T.nilable(T::Array[::ClerkSDKBackend::Shared::PhoneNumber]), primary_email_address_id: T.nilable(::String), primary_phone_number_id: T.nilable(::String), primary_web3_wallet_id: T.nilable(::String), private_metadata: T.nilable(::ClerkSDKBackend::Shared::PrivateMetadata), profile_image_url: T.nilable(::String), public_metadata: T.nilable(::ClerkSDKBackend::Shared::PublicMetadata), saml_accounts: T.nilable(T::Array[::ClerkSDKBackend::Shared::SAMLAccount]), totp_enabled: T.nilable(T::Boolean), two_factor_enabled: T.nilable(T::Boolean), unsafe_metadata: T.nilable(::ClerkSDKBackend::Shared::UnsafeMetadata), updated_at: T.nilable(::Integer), username: T.nilable(::String), verification_attempts_remaining: T.nilable(::Integer), web3_wallets: T.nilable(T::Array[::ClerkSDKBackend::Shared::Web3Wallet])).void }
      def initialize(backup_code_enabled: nil, banned: nil, create_organization_enabled: nil, create_organizations_limit: nil, created_at: nil, delete_self_enabled: nil, email_addresses: nil, external_accounts: nil, external_id: nil, first_name: nil, has_image: nil, id: nil, image_url: nil, last_active_at: nil, last_name: nil, last_sign_in_at: nil, legal_accepted_at: nil, locked: nil, lockout_expires_in_seconds: nil, mfa_disabled_at: nil, mfa_enabled_at: nil, object: nil, passkeys: nil, password_enabled: nil, phone_numbers: nil, primary_email_address_id: nil, primary_phone_number_id: nil, primary_web3_wallet_id: nil, private_metadata: nil, profile_image_url: nil, public_metadata: nil, saml_accounts: nil, totp_enabled: nil, two_factor_enabled: nil, unsafe_metadata: nil, updated_at: nil, username: nil, verification_attempts_remaining: nil, web3_wallets: nil)
        @backup_code_enabled = backup_code_enabled
        @banned = banned
        @create_organization_enabled = create_organization_enabled
        @create_organizations_limit = create_organizations_limit
        @created_at = created_at
        @delete_self_enabled = delete_self_enabled
        @email_addresses = email_addresses
        @external_accounts = external_accounts
        @external_id = external_id
        @first_name = first_name
        @has_image = has_image
        @id = id
        @image_url = image_url
        @last_active_at = last_active_at
        @last_name = last_name
        @last_sign_in_at = last_sign_in_at
        @legal_accepted_at = legal_accepted_at
        @locked = locked
        @lockout_expires_in_seconds = lockout_expires_in_seconds
        @mfa_disabled_at = mfa_disabled_at
        @mfa_enabled_at = mfa_enabled_at
        @object = object
        @passkeys = passkeys
        @password_enabled = password_enabled
        @phone_numbers = phone_numbers
        @primary_email_address_id = primary_email_address_id
        @primary_phone_number_id = primary_phone_number_id
        @primary_web3_wallet_id = primary_web3_wallet_id
        @private_metadata = private_metadata
        @profile_image_url = profile_image_url
        @public_metadata = public_metadata
        @saml_accounts = saml_accounts
        @totp_enabled = totp_enabled
        @two_factor_enabled = two_factor_enabled
        @unsafe_metadata = unsafe_metadata
        @updated_at = updated_at
        @username = username
        @verification_attempts_remaining = verification_attempts_remaining
        @web3_wallets = web3_wallets
      end
    end
  end
end
