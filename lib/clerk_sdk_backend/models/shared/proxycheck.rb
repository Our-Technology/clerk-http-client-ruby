# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module ClerkSDKBackend
  module Shared
  
    # Health check information about a domain's proxy configuration validation attempt.
    class ProxyCheck < ::ClerkSDKBackend::Utils::FieldAugmented
      extend T::Sig


      field :created_at, ::Integer, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('created_at') } }

      field :domain_id, ::String, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('domain_id') } }

      field :id, ::String, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('id') } }

      field :last_run_at, ::Integer, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('last_run_at') } }

      field :object, ::ClerkSDKBackend::Shared::ProxyCheckObject, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('object'), 'decoder': Utils.enum_from_string(::ClerkSDKBackend::Shared::ProxyCheckObject, false) } }

      field :proxy_url, ::String, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('proxy_url') } }

      field :successful, T::Boolean, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('successful') } }

      field :updated_at, ::Integer, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('updated_at') } }


      sig { params(created_at: ::Integer, domain_id: ::String, id: ::String, last_run_at: ::Integer, object: ::ClerkSDKBackend::Shared::ProxyCheckObject, proxy_url: ::String, successful: T::Boolean, updated_at: ::Integer).void }
      def initialize(created_at: nil, domain_id: nil, id: nil, last_run_at: nil, object: nil, proxy_url: nil, successful: nil, updated_at: nil)
        @created_at = created_at
        @domain_id = domain_id
        @id = id
        @last_run_at = last_run_at
        @object = object
        @proxy_url = proxy_url
        @successful = successful
        @updated_at = updated_at
      end
    end
  end
end
