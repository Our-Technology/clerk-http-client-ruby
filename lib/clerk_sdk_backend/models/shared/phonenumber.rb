# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module ClerkSDKBackend
  module Shared
  
    # Success
    class PhoneNumber < ::ClerkSDKBackend::Utils::FieldAugmented
      extend T::Sig

      # Unix timestamp of creation
      # 
      field :created_at, ::Integer, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('created_at') } }

      field :linked_to, T::Array[::ClerkSDKBackend::Shared::IdentificationLink], { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('linked_to') } }
      # String representing the object's type. Objects of the same type share the same value.
      # 
      field :object, ::ClerkSDKBackend::Shared::PhoneNumberObject, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('object'), 'decoder': Utils.enum_from_string(::ClerkSDKBackend::Shared::PhoneNumberObject, false) } }

      field :phone_number, ::String, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('phone_number') } }

      field :reserved, T::Boolean, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('reserved') } }
      # Unix timestamp of creation
      # 
      field :updated_at, ::Integer, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('updated_at') } }

      field :verification, ::Object, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('verification') } }

      field :backup_codes, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('backup_codes') } }

      field :default_second_factor, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('default_second_factor') } }

      field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('id') } }

      field :reserved_for_second_factor, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('reserved_for_second_factor') } }


      sig { params(created_at: ::Integer, linked_to: T::Array[::ClerkSDKBackend::Shared::IdentificationLink], object: ::ClerkSDKBackend::Shared::PhoneNumberObject, phone_number: ::String, reserved: T::Boolean, updated_at: ::Integer, verification: ::Object, backup_codes: T.nilable(T::Array[::String]), default_second_factor: T.nilable(T::Boolean), id: T.nilable(::String), reserved_for_second_factor: T.nilable(T::Boolean)).void }
      def initialize(created_at: nil, linked_to: nil, object: nil, phone_number: nil, reserved: nil, updated_at: nil, verification: nil, backup_codes: nil, default_second_factor: nil, id: nil, reserved_for_second_factor: nil)
        @created_at = created_at
        @linked_to = linked_to
        @object = object
        @phone_number = phone_number
        @reserved = reserved
        @updated_at = updated_at
        @verification = verification
        @backup_codes = backup_codes
        @default_second_factor = default_second_factor
        @id = id
        @reserved_for_second_factor = reserved_for_second_factor
      end
    end
  end
end
