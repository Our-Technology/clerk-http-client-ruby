# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module ClerkSDKBackend
  module Shared
  
    # List of JWT templates
    class JWTTemplate < ::ClerkSDKBackend::Utils::FieldAugmented
      extend T::Sig


      field :allowed_clock_skew, ::Integer, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('allowed_clock_skew') } }

      field :claims, ::ClerkSDKBackend::Shared::Claims, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('claims') } }
      # Unix timestamp of creation.
      # 
      field :created_at, ::Integer, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('created_at') } }

      field :id, ::String, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('id') } }

      field :lifetime, ::Integer, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('lifetime') } }

      field :name, ::String, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('name') } }

      field :object, ::ClerkSDKBackend::Shared::JWTTemplateObject, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('object'), 'decoder': Utils.enum_from_string(::ClerkSDKBackend::Shared::JWTTemplateObject, false) } }
      # Unix timestamp of last update.
      # 
      field :updated_at, ::Integer, { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('updated_at') } }

      field :custom_signing_key, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('custom_signing_key') } }

      field :signing_algorithm, T.nilable(::String), { 'format_json': { 'letter_case': ::ClerkSDKBackend::Utils.field_name('signing_algorithm') } }


      sig { params(allowed_clock_skew: ::Integer, claims: ::ClerkSDKBackend::Shared::Claims, created_at: ::Integer, id: ::String, lifetime: ::Integer, name: ::String, object: ::ClerkSDKBackend::Shared::JWTTemplateObject, updated_at: ::Integer, custom_signing_key: T.nilable(T::Boolean), signing_algorithm: T.nilable(::String)).void }
      def initialize(allowed_clock_skew: nil, claims: nil, created_at: nil, id: nil, lifetime: nil, name: nil, object: nil, updated_at: nil, custom_signing_key: nil, signing_algorithm: nil)
        @allowed_clock_skew = allowed_clock_skew
        @claims = claims
        @created_at = created_at
        @id = id
        @lifetime = lifetime
        @name = name
        @object = object
        @updated_at = updated_at
        @custom_signing_key = custom_signing_key
        @signing_algorithm = signing_algorithm
      end
    end
  end
end
