# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module ClerkSDKBackend
  extend T::Sig
  class Invitations
    extend T::Sig
    # Invitations allow you to invite someone to sign up to your application, via email.
    # https://clerk.com/docs/authentication/invitations

    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end


    sig { params(request: ::ClerkSDKBackend::Operations::CreateInvitationRequestBody).returns(::ClerkSDKBackend::Operations::CreateInvitationResponse) }
    def create(request)
      # create - Create an invitation
      # Creates a new invitation for the given email address and sends the invitation email.
      # Keep in mind that you cannot create an invitation if there is already one for the given email address.
      # Also, trying to create an invitation for an email address that already exists in your application will result to an error.
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/invitations"
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::ClerkSDKBackend::Operations::CreateInvitationResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::Invitation)
          res.invitation = out
        end
      elsif [400, 422].include?(r.status)
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::ClerkErrors)
          res.clerk_errors = out
        end
      end
      res
    end


    sig { params(limit: T.nilable(::Float), offset: T.nilable(::Float), status: T.nilable(::ClerkSDKBackend::Operations::ListInvitationsQueryParamStatus)).returns(::ClerkSDKBackend::Operations::ListInvitationsResponse) }
    def all(limit = nil, offset = nil, status = nil)
      # all - List all invitations
      # Returns all non-revoked invitations for your application, sorted by creation date
      request = ::ClerkSDKBackend::Operations::ListInvitationsRequest.new(
        
        limit: limit,
        offset: offset,
        status: status
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/invitations"
      headers = {}
      query_params = Utils.get_query_params(::ClerkSDKBackend::Operations::ListInvitationsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::ClerkSDKBackend::Operations::ListInvitationsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[::ClerkSDKBackend::Shared::Invitation])
          res.invitation_list = out
        end
      elsif [400, 401, 422, 500].include?(r.status)
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::ClerkErrors)
          res.clerk_errors = out
        end
      end
      res
    end


    sig { params(invitation_id: ::String).returns(::ClerkSDKBackend::Operations::RevokeInvitationResponse) }
    def delete(invitation_id)
      # delete - Revokes an invitation
      # Revokes the given invitation.
      # Revoking an invitation will prevent the user from using the invitation link that was sent to them.
      # However, it doesn't prevent the user from signing up if they follow the sign up flow.
      # Only active (i.e. non-revoked) invitations can be revoked.
      request = ::ClerkSDKBackend::Operations::RevokeInvitationRequest.new(
        
        invitation_id: invitation_id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::ClerkSDKBackend::Operations::RevokeInvitationRequest,
        base_url,
        '/invitations/{invitation_id}/revoke',
        request
      )
      headers = {}
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::ClerkSDKBackend::Operations::RevokeInvitationResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::InvitationRevoked)
          res.invitation_revoked = out
        end
      elsif [400, 404].include?(r.status)
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::ClerkErrors)
          res.clerk_errors = out
        end
      end
      res
    end
  end
end
