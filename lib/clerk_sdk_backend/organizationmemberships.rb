# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module ClerkSDKBackend
  extend T::Sig
  class OrganizationMemberships
    extend T::Sig


    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end


    sig { params(organization_id: ::String, request_body: ::ClerkSDKBackend::Operations::CreateOrganizationMembershipRequestBody).returns(::ClerkSDKBackend::Operations::CreateOrganizationMembershipResponse) }
    def create(organization_id, request_body)
      # create - Create a new organization membership
      # Adds a user as a member to the given organization.
      # Only users in the same instance as the organization can be added as members.
      # 
      # This organization will be the user's [active organization] (https://clerk.com/docs/organizations/overview#active-organization)
      # the next time they create a session, presuming they don't explicitly set a
      # different organization as active before then.
      request = ::ClerkSDKBackend::Operations::CreateOrganizationMembershipRequest.new(
        
        organization_id: organization_id,
        request_body: request_body
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::ClerkSDKBackend::Operations::CreateOrganizationMembershipRequest,
        base_url,
        '/organizations/{organization_id}/memberships',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::ClerkSDKBackend::Operations::CreateOrganizationMembershipResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::OrganizationMembership)
          res.organization_membership = out
        end
      elsif [400, 403, 404, 422].include?(r.status)
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::ClerkErrors)
          res.clerk_errors = out
        end
      end
      res
    end


    sig { params(organization_id: ::String, limit: T.nilable(::Float), offset: T.nilable(::Float), order_by: T.nilable(::String)).returns(::ClerkSDKBackend::Operations::ListOrganizationMembershipsResponse) }
    def all(organization_id, limit = nil, offset = nil, order_by = nil)
      # all - Get a list of all members of an organization
      # Retrieves all user memberships for the given organization
      request = ::ClerkSDKBackend::Operations::ListOrganizationMembershipsRequest.new(
        
        organization_id: organization_id,
        limit: limit,
        offset: offset,
        order_by: order_by
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::ClerkSDKBackend::Operations::ListOrganizationMembershipsRequest,
        base_url,
        '/organizations/{organization_id}/memberships',
        request
      )
      headers = {}
      query_params = Utils.get_query_params(::ClerkSDKBackend::Operations::ListOrganizationMembershipsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::ClerkSDKBackend::Operations::ListOrganizationMembershipsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::OrganizationMemberships)
          res.organization_memberships = out
        end
      elsif [401, 422].include?(r.status)
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::ClerkErrors)
          res.clerk_errors = out
        end
      end
      res
    end


    sig { params(organization_id: ::String, user_id: ::String, request_body: ::ClerkSDKBackend::Operations::UpdateOrganizationMembershipRequestBody).returns(::ClerkSDKBackend::Operations::UpdateOrganizationMembershipResponse) }
    def update(organization_id, user_id, request_body)
      # update - Update an organization membership
      # Updates the properties of an existing organization membership
      request = ::ClerkSDKBackend::Operations::UpdateOrganizationMembershipRequest.new(
        
        organization_id: organization_id,
        user_id: user_id,
        request_body: request_body
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::ClerkSDKBackend::Operations::UpdateOrganizationMembershipRequest,
        base_url,
        '/organizations/{organization_id}/memberships/{user_id}',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.patch(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::ClerkSDKBackend::Operations::UpdateOrganizationMembershipResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::OrganizationMembership)
          res.organization_membership = out
        end
      elsif [400, 404, 422].include?(r.status)
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::ClerkErrors)
          res.clerk_errors = out
        end
      end
      res
    end


    sig { params(organization_id: ::String, user_id: ::String).returns(::ClerkSDKBackend::Operations::DeleteOrganizationMembershipResponse) }
    def delete(organization_id, user_id)
      # delete - Remove a member from an organization
      # Removes the given membership from the organization
      request = ::ClerkSDKBackend::Operations::DeleteOrganizationMembershipRequest.new(
        
        organization_id: organization_id,
        user_id: user_id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::ClerkSDKBackend::Operations::DeleteOrganizationMembershipRequest,
        base_url,
        '/organizations/{organization_id}/memberships/{user_id}',
        request
      )
      headers = {}
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.delete(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::ClerkSDKBackend::Operations::DeleteOrganizationMembershipResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::OrganizationMembership)
          res.organization_membership = out
        end
      elsif [400, 401, 404].include?(r.status)
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::ClerkErrors)
          res.clerk_errors = out
        end
      end
      res
    end


    sig { params(organization_id: ::String, user_id: ::String, request_body: ::ClerkSDKBackend::Operations::UpdateOrganizationMembershipMetadataRequestBody).returns(::ClerkSDKBackend::Operations::UpdateOrganizationMembershipMetadataResponse) }
    def update_metadata(organization_id, user_id, request_body)
      # update_metadata - Merge and update organization membership metadata
      # Update an organization membership's metadata attributes by merging existing values with the provided parameters.
      # Metadata values will be updated via a deep merge. Deep means that any nested JSON objects will be merged as well.
      # You can remove metadata keys at any level by setting their value to `null`.
      request = ::ClerkSDKBackend::Operations::UpdateOrganizationMembershipMetadataRequest.new(
        
        organization_id: organization_id,
        user_id: user_id,
        request_body: request_body
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::ClerkSDKBackend::Operations::UpdateOrganizationMembershipMetadataRequest,
        base_url,
        '/organizations/{organization_id}/memberships/{user_id}/metadata',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.patch(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::ClerkSDKBackend::Operations::UpdateOrganizationMembershipMetadataResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::OrganizationMembership)
          res.organization_membership = out
        end
      elsif [400, 404, 422].include?(r.status)
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::ClerkErrors)
          res.clerk_errors = out
        end
      end
      res
    end


    sig { params(limit: T.nilable(::Float), offset: T.nilable(::Float), order_by: T.nilable(::String)).returns(::ClerkSDKBackend::Operations::InstanceGetOrganizationMembershipsResponse) }
    def find(limit = nil, offset = nil, order_by = nil)
      # find - Get a list of all organization memberships within an instance.
      # Retrieves all organization user memberships for the given instance.
      request = ::ClerkSDKBackend::Operations::InstanceGetOrganizationMembershipsRequest.new(
        
        limit: limit,
        offset: offset,
        order_by: order_by
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/organization_memberships"
      headers = {}
      query_params = Utils.get_query_params(::ClerkSDKBackend::Operations::InstanceGetOrganizationMembershipsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::ClerkSDKBackend::Operations::InstanceGetOrganizationMembershipsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::OrganizationMemberships)
          res.organization_memberships = out
        end
      elsif [400, 401, 422, 500].include?(r.status)
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::ClerkSDKBackend::Shared::ClerkErrors)
          res.clerk_errors = out
        end
      end
      res
    end
  end
end
