# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module ClerkSDKBackend
  extend T::Sig

  class SDK
    extend T::Sig

    attr_accessor :miscellaneous, :jwks, :clients, :email_addresses, :phone_numbers, :sessions, :users, :invitations, :organization_invitations, :allowlist_identifiers, :blocklist_identifiers, :beta_features, :actor_tokens, :domains, :instance_settings, :webhooks, :jwt_templates, :organizations, :organization_memberships, :organization_domains, :proxy_checks, :redirect_urls, :sign_in_tokens, :sign_ups, :oauth_applications, :saml_connections, :testing_tokens

    sig do
      params(client: Faraday::Request,
             security: T.nilable(Shared::Security),
             server_idx: Integer,
             server_url: String,
             url_params: T::Hash[Symbol, String]).void
    end
    def initialize(client: nil,
                   security: nil,
                   server_idx: nil,
                   server_url: nil,
                   url_params: nil)

      ## Instantiates the SDK configuring it with the provided parameters.
      # @param [Faraday::Request] client The faraday HTTP client to use for all operations
      # @param [Shared::Security] security The security details required for authentication
      # @param [::Integer] server_idx The index of the server to use for all operations
      # @param [::String] server_url The server URL to use for all operations
      # @param [::Hash<::Symbol, ::String>] url_params Parameters to optionally template the server URL with

      if client.nil?
        client = Faraday.new(request: {
                          params_encoder: Faraday::FlatParamsEncoder
                        }) do |f|
          f.request :multipart, {}
          # f.response :logger
        end
      end

      if !server_url.nil?
        if !url_params.nil?
          server_url = Utils.template_url(server_url, url_params)
        end
      end
      server_idx = 0 if server_idx.nil?

      @sdk_configuration = SDKConfiguration.new(client, security, server_url, server_idx)
      init_sdks
    end

    sig { params(server_url: String).void }
    def config_server_url(server_url)
      @sdk_configuration.server_url = server_url
      init_sdks
    end

    sig { params(server_idx: Integer).void }
    def config_server(server_idx)
      raise StandardError, "Invalid server index #{server_idx}" if server_idx.negative? || server_idx >= SERVERS.length
      @sdk_configuration.server_idx = server_idx
      init_sdks
    end

    sig { params(security: ::ClerkSDKBackend::Shared::Security).void }
    def config_security(security)
      @sdk_configuration.security = security
    end

    sig { void }
    def init_sdks
      @miscellaneous = Miscellaneous.new(@sdk_configuration)
      @jwks = Jwks.new(@sdk_configuration)
      @clients = Clients.new(@sdk_configuration)
      @email_addresses = EmailAddresses.new(@sdk_configuration)
      @phone_numbers = PhoneNumbers.new(@sdk_configuration)
      @sessions = Sessions.new(@sdk_configuration)
      @users = Users.new(@sdk_configuration)
      @invitations = Invitations.new(@sdk_configuration)
      @organization_invitations = OrganizationInvitations.new(@sdk_configuration)
      @allowlist_identifiers = AllowlistIdentifiers.new(@sdk_configuration)
      @blocklist_identifiers = BlocklistIdentifiers.new(@sdk_configuration)
      @beta_features = BetaFeatures.new(@sdk_configuration)
      @actor_tokens = ActorTokens.new(@sdk_configuration)
      @domains = Domains.new(@sdk_configuration)
      @instance_settings = InstanceSettings.new(@sdk_configuration)
      @webhooks = Webhooks.new(@sdk_configuration)
      @jwt_templates = JwtTemplates.new(@sdk_configuration)
      @organizations = Organizations.new(@sdk_configuration)
      @organization_memberships = OrganizationMemberships.new(@sdk_configuration)
      @organization_domains = OrganizationDomains.new(@sdk_configuration)
      @proxy_checks = ProxyChecks.new(@sdk_configuration)
      @redirect_urls = RedirectUrls.new(@sdk_configuration)
      @sign_in_tokens = SignInTokens.new(@sdk_configuration)
      @sign_ups = SignUps.new(@sdk_configuration)
      @oauth_applications = OauthApplications.new(@sdk_configuration)
      @saml_connections = SamlConnections.new(@sdk_configuration)
      @testing_tokens = TestingTokens.new(@sdk_configuration)
    end
  end
end
